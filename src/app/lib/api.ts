import axios, { AxiosInstance } from "axios";


export const api = axios.create({
  baseURL: import.meta.env.VITE_API_URL,
  headers: {
    "Content-Type": "application/json",
    
  }
})

export const apiAuth = axios.create({
  baseURL: import.meta.env.VITE_API_LOGIN,
  headers: {
    "Content-Type": "application/json",
  }
})

export const apiUsers = axios.create({
  baseURL: import.meta.env.VITE_API_USERS,
  headers:{
    "Content-Type": "application/json",
  }
})

export const apiCarts = axios.create({
  baseURL: import.meta.env.VITE_API_CARTS,
  headers: {
    "Content-Type": "application/json",
  }
})

export const apiOrders = axios.create({
  baseURL: import.meta.env.VITE_API_ORDERS,
  headers: {
    "Content-Type": "application/json",
  }
})

export const apiEmails = axios.create({
  baseURL: import.meta.env.VITE_API_EMAIL,
  headers: {
    "Content-Type": "application/json",
  }
})

export const apiVinyls = axios.create({
  baseURL: import.meta.env.VITE_API_VINYLS,
  headers: {
    "Content-Type": "application/json",
  }
});


export const apiCheckout = axios.create({
  baseURL: import.meta.env.VITE_API_CHECKOUT,
  headers: {
    "Content-Type": "application/json",
  }
})

// generated by IA

function attachAuthInterceptor(instance: AxiosInstance) {
  instance.interceptors.request.use((config) => {
    const token = localStorage.getItem("token");
    const base = config.baseURL || "";
    const urlPart = config.url || "";
    const fullUrl = `${base}${urlPart}`;
    console.log(`Interceptor[${base}]: url=${urlPart} method=${config.method} token=${token ? 'yes' : 'no'}`);

    const isAuthRoute = fullUrl.includes("/api/auth");
    const isVinylGet = fullUrl.includes("/api/vinyls") && config.method === "get";
    const isMailRoute = fullUrl.includes("/api/emails");
    const isUserPost = fullUrl.includes("/api/users") && config.method === "post";
    const isCheckoutRoute = fullUrl.includes("/api/checkout");
    const isResetPassword = fullUrl.endsWith("/reset-password.html");

    const isPublic = isAuthRoute || isVinylGet || isMailRoute || isUserPost || isCheckoutRoute || isResetPassword;

    if (token && !isPublic) {
      if (!config.headers) config.headers = {} as import("axios").AxiosRequestHeaders;
      (config.headers as any).Authorization = `Bearer ${token}`;
      console.log("Enviando Authorization para:", fullUrl);
    } else {
      console.log("NÃ£o enviando Authorization. isPublic:", isPublic, "tokenPresent:", !!token);
    }

    return config;
  }, (error) => Promise.reject(error));
}

// attach to all instances
attachAuthInterceptor(api);
attachAuthInterceptor(apiAuth);
attachAuthInterceptor(apiUsers);
attachAuthInterceptor(apiCarts);
attachAuthInterceptor(apiOrders);
attachAuthInterceptor(apiEmails);
attachAuthInterceptor(apiVinyls);
attachAuthInterceptor(apiCheckout);


const BASE = import.meta.env.VITE_API_URL || "http://localhost:3333";

export async function fetchJSON<T>(path: string): Promise<T> {
  const res = await fetch(`${BASE}${path}`);
  if (!res.ok) throw new Error(`HTTP ${res.status}`);
  return (await res.json()) as T;
}